##################### KF ######################

change sensor noise
'Q': np.diag([0.05, 0.05, 0.05]), 
'R': np.diag([0.1, 0.1, 0.1]), 

Kalman Filter run time:  0.31087327003479004
KF error mean:  0.2692382740993111
Sensor error mean:  0.354955930432798

##
'Q': np.diag([0.2, 0.2, 0.2]), 
'R': np.diag([0.1, 0.1, 0.1]),

Kalman Filter run time:  0.30663228034973145
KF error mean:  0.40780907711136877
Sensor error mean:  0.7088867215895535

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]),

Kalman Filter run time:  0.31532859802246094
KF error mean:  0.3374439046493237
Sensor error mean:  0.5008287635391578

the sensor noise affect the accuracy, a larger noise leads to a larger error


change motion noise
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.05, 0.05, 0.05]), 

Kalman Filter run time:  0.3192412853240967
KF error mean:  0.30490262181792616
Sensor error mean:  0.5166392321672727

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.2, 0.2, 0.2]), 

Kalman Filter run time:  0.3150362968444824
KF error mean:  0.38405419907227895
Sensor error mean:  0.507093148745311

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 

Kalman Filter run time:  0.31532859802246094
KF error mean:  0.3374439046493237
Sensor error mean:  0.5008287635391578

the motion noise affect the accuracy, a larger noise leads to a larger error


interesting case: the robot starting position was set inside the obstacle
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
sensor_noise = np.random.multivariate_normal([2.0, 5.5, -1.57], noise)   # for KF

the KF failed to find a reasonable path

##################### PF ######################
every 10 times resample once, every 80 times draw the particles

change number of particle
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 100,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  6.940377712249756
PF error mean:  0.3387553740978514
Sensor error mean:  0.49804188832966845

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  33.342034101486206
PF error mean:  0.33454719599013266
Sensor error mean:  0.49698476442848366

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 1000,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  66.19457840919495
PF error mean:  0.3372894027743705
Sensor error mean:  0.496869480236143

since there's not much difference in error between 1000 and 500 sample time, choose 500 to save computational resource and keep accuracy
run time should compared without plotting (should be tested later)


change sample covariance
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  33.342034101486206
PF error mean:  0.33454719599013266
Sensor error mean:  0.49698476442848366

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.5, 0.5, 0.5])

Particle Filter run time:  33.234864711761475
PF error mean:  0.34457812869230114
Sensor error mean:  0.5101989849192053

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.8, 0.8, 0.8])

Particle Filter run time:  34.087162733078
PF error mean:  0.337981500035317
Sensor error mean:  0.5042768343580437

changing sample covariance does not affect the accuracy of the system, it only impact the initial estimation, as you can see in the figures, 
a larger covariance will lead to a bigger prediction area


change sensor noise
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  33.342034101486206
PF error mean:  0.33454719599013266
Sensor error mean:  0.49698476442848366

##
'Q': np.diag([0.2, 0.2, 0.2]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  33.3983314037323
PF error mean:  0.43491033966099407
Sensor error mean:  0.7236618233448888

##
'Q': np.diag([0.05, 0.05, 0.05]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  32.88606786727905
PF error mean:  0.2731871183067775
Sensor error mean:  0.3596606973773532

the sensor noise affect the accuracy, a larger noise leads to a larger error


change motion noise
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  33.342034101486206
PF error mean:  0.33454719599013266
Sensor error mean:  0.49698476442848366

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.2, 0.2, 0.2]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  33.114189863204956
PF error mean:  0.38551550316059124
Sensor error mean:  0.5092973651745273

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.05, 0.05, 0.05]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  33.58634924888611
PF error mean:  0.3044872180486765
Sensor error mean:  0.5077157985134202

the motion noise affect the accuracy, a larger noise leads to a larger error


interesting case: the robot starting position was set inside the obstacle
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.5, 0.5, 0.5])
self.init_state = [2.0, 5.5, -1.57]   # for PF
sensor_noise = np.random.multivariate_normal([2.0, 5.5, -1.57], noise)   # for KF

the sample covariance was set larger to ensure it can successfully detect the sensor mearsurement