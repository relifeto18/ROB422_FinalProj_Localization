##################### KF ######################

change sensor noise
'Q': np.diag([0.05, 0.05, 0.05]), 
'R': np.diag([0.1, 0.1, 0.1]), 

Kalman Filter run time:  0.3149745464324951
KF error mean:  0.27746139975449374
Sensor error mean:  0.3631240321894722

##
'Q': np.diag([0.2, 0.2, 0.2]), 
'R': np.diag([0.1, 0.1, 0.1]),

Kalman Filter run time:  420.9300606250763
KF error mean:  0.4059131192279072
Sensor error mean:  0.7031360503427048

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]),

Kalman Filter run time:  0.31532859802246094
KF error mean:  0.3374439046493237
Sensor error mean:  0.5008287635391578

the sensor noise affect the accuracy, a larger noise leads to a larger error


change motion noise
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.05, 0.05, 0.05]), 

Kalman Filter run time:  323.76797223091125
KF error mean:  0.29694150698499605
Sensor error mean:  0.5039646636474097

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.2, 0.2, 0.2]), 

Kalman Filter run time:  424.4473235607147
KF error mean:  0.3820923506002853
Sensor error mean:  0.5050887539525355

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 

Kalman Filter run time:  0.31532859802246094
KF error mean:  0.3374439046493237
Sensor error mean:  0.5008287635391578

the motion noise affect the accuracy, a larger noise leads to a larger error


interesting case: the robot starting position was set inside the obstacle
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
sensor_noise = np.random.multivariate_normal([2.0, 5.5, -1.57], noise)   # for KF

the KF failed to find a reasonable path

##################### PF ######################
every 10 times resample once, every 80 times draw the particles

change number of particle
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 100,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  259.2349953651428
PF error mean:  0.5200310315134417
Sensor error mean:  0.5104157568384022

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  909.4055104255676
PF error mean:  0.41687274012216025
Sensor error mean:  0.4953688092718899

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 1000,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  1689.6501863002777
PF error mean:  0.3945795791073493
Sensor error mean:  0.5064980606559878

since there's not much difference in error between 1000 and 500 sample time, choose 500 to save computational resource and keep accuracy
run time should compared without plotting (should be tested later)


change sample covariance
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  909.4055104255676
PF error mean:  0.41687274012216025
Sensor error mean:  0.4953688092718899

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.5, 0.5, 0.5])

Particle Filter run time:  888.2086334228516
PF error mean:  0.4266476591036244
Sensor error mean:  0.5028238778052536

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.8, 0.8, 0.8])

Particle Filter run time:  896.428560256958
PF error mean:  0.4149249133864428
Sensor error mean:  0.4955277618700313

changing sample covariance does not affect the accuracy of the system, it only impact the initial estimation, as you can see in the figures, 
a larger covariance will lead to a bigger prediction area


change sensor noise
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  909.4055104255676
PF error mean:  0.41687274012216025
Sensor error mean:  0.4953688092718899

##
'Q': np.diag([0.2, 0.2, 0.2]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  897.1047010421753
PF error mean:  0.4663270701651364
Sensor error mean:  0.7024673937325895

##
'Q': np.diag([0.05, 0.05, 0.05]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  884.4435863494873
PF error mean:  0.39186676310826607
Sensor error mean:  0.3638615442550329

the sensor noise affect the accuracy, a larger noise leads to a larger error


change motion noise
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  909.4055104255676
PF error mean:  0.41687274012216025
Sensor error mean:  0.4953688092718899

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.2, 0.2, 0.2]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  884.0056872367859
PF error mean:  0.5589520055580139
Sensor error mean:  0.5047679598578328

##
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.05, 0.05, 0.05]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.2, 0.2, 0.2])

Particle Filter run time:  891.4730653762817
PF error mean:  0.3287464714016917
Sensor error mean:  0.5031625798053738

the motion noise affect the accuracy, a larger noise leads to a larger error


interesting case: the robot starting position was set inside the obstacle
'Q': np.diag([0.1, 0.1, 0.1]), 
'R': np.diag([0.1, 0.1, 0.1]), 
'Sample_time': 500,
'Sample_cov': np.diag([0.5, 0.5, 0.5])
self.init_state = [2.0, 5.5, -1.57]   # for PF
sensor_noise = np.random.multivariate_normal([2.0, 5.5, -1.57], noise)   # for KF

the sample covariance was set larger to ensure it can successfully detect the sensor mearsurement